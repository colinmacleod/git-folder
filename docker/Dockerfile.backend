# Multi-stage Dockerfile for git-folder backend

# Stage 1: Dependencies
FROM node:20-alpine AS deps
WORKDIR /app

# Install build dependencies for native modules
RUN apk add --no-cache python3 make g++ git openssh-client git-lfs

# Copy package files
COPY backend/package*.json ./

# Install production dependencies
RUN npm ci --only=production

# Stage 2: Build
FROM node:20-alpine AS builder
WORKDIR /app

# Install build dependencies
RUN apk add --no-cache python3 make g++ git openssh-client git-lfs

# Copy package files and install all dependencies
COPY backend/package*.json ./
RUN npm ci

# Copy source code
COPY backend/ ./

# Build the application
RUN npm run build

# Stage 3: Production
FROM node:20-alpine AS production
WORKDIR /app

# Install runtime dependencies only
RUN apk add --no-cache git openssh-client git-lfs bash \
    && git lfs install

# Create non-root user
RUN addgroup -g 1001 -S nodejs && adduser -S nodejs -u 1001

# Copy production dependencies
COPY --from=deps --chown=nodejs:nodejs /app/node_modules ./node_modules

# Copy built application
COPY --from=builder --chown=nodejs:nodejs /app/dist ./dist
COPY --from=builder --chown=nodejs:nodejs /app/package*.json ./

# Create necessary directories
RUN mkdir -p /app/repos /app/ssh /app/data /app/logs && \
    chown -R nodejs:nodejs /app

# Switch to non-root user
USER nodejs

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD node -e "require('http').get('http://localhost:8080/api/health/ping', (res) => process.exit(res.statusCode === 200 ? 0 : 1))"

# Start the application
CMD ["node", "dist/server.js"]

# Development stage
FROM node:20-alpine AS development
WORKDIR /app

# Install all dependencies including git
RUN apk add --no-cache python3 make g++ git openssh-client git-lfs bash \
    && git lfs install

# Copy package files first to leverage Docker cache
COPY backend/package*.json ./

# Install dependencies as root
RUN npm install

# Create non-root user
RUN addgroup -g 1001 -S nodejs && adduser -S nodejs -u 1001

# Create necessary directories
RUN mkdir -p /app/repos /app/ssh /app/data /app/logs && \
    chown -R nodejs:nodejs /app

# Switch to non-root user
USER nodejs

# Expose port
EXPOSE 8080

# Start with tsx watch for hot reloading
CMD ["npm", "run", "dev"]